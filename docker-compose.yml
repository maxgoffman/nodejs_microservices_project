networks:
  local-network:
    driver: bridge

services:
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: products
    expose:
      - "3306"
    ports:
      - "3306:3306"
    networks:
      - local-network
    volumes:
      - "./setup/mysql:/docker-entrypoint-initdb.d:delegated"

  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: suppliers_db
    ports:
      - "27017:27017"
    volumes:
      - ./setup/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - local-network

  dynamodb-local:
    image: amazon/dynamodb-local
    ports:
      - "8000:8000"
    networks:
      - local-network
    user: root
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '[ "$(curl -s -o /dev/null -I -w ''%{http_code}'' http://localhost:8000)" == "400" ]',
        ]
      interval: 10s
      timeout: 10s
      retries: 10

  dynamodb-local-setup:
    depends_on:
      dynamodb-local:
        condition: service_healthy
    image: amazon/aws-cli
    volumes:
      - "./setup/dynamodb/schemas:/tmp/dynamoschemas"
      - "./setup/dynamodb/data:/tmp/dynamodata"
    environment:
      AWS_ACCESS_KEY_ID: "FAKEID"
      AWS_SECRET_ACCESS_KEY: "FAKEKEY"
      AWS_REGION: "us-east-1"
    entrypoint:
      - bash
    networks:
      - local-network
    command: '-c "for f in /tmp/dynamoschemas/*.json; do aws dynamodb create-table --endpoint-url "http://dynamodb-local:8000" --cli-input-json file://"$${f#./}"; done && for f in /tmp/dynamodata/*.json; do aws dynamodb put-item --endpoint-url "http://dynamodb-local:8000" --table-name $(basename "$${f%.*}") --item file://"$${f#./}"; done"'

  localstack:
    image: localstack/localstack
    environment:
      SERVICES: s3,sqs,sns,lambda,apigateway
      AWS_ACCESS_KEY_ID: "FAKEID"
      AWS_SECRET_ACCESS_KEY: "FAKEKEY"
      AWS_REGION: "us-east-1"
    ports:
      - "4566:4566"
    networks:
      - local-network
    volumes:
      - ./setup/s3/initscript/init-s3.sh:/etc/localstack/init/ready.d/init-s3.sh
      #- ./setup/s3/initscript/init-s3.sh:/docker-entrypoint-initaws.d/init-s3.sh
      - ./setup/s3/data:/data

  products:
    build: ./services/products
    expose:
      - "5001"
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=development
      - PORT=5001
    depends_on:
      - mysql
    networks:
      - local-network
    volumes:
      - "./services/products:/app:cached"
      - "/app/node_modules"
    command: "supervisor -w ./ ./app.js"

  clients:
    build: ./services/clients
    expose:
      - "5002"
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=development
      - PORT=5002
    depends_on:
      - dynamodb-local
    volumes:
      - "./services/clients:/app:cached"
      - "/app/node_modules"
    command: "supervisor -w ./ ./app.js"
    networks:
      - local-network

  suppliers:
    build: ./services/suppliers
    expose:
      - "5003"
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=development
      - PORT=5003
    depends_on:
      - mongodb
    volumes:
      - "./services/suppliers:/app:cached"
      - "/app/node_modules"
    command: "supervisor -w ./ ./app.js"
    networks:
      - local-network

  documents:
    build: ./services/documents
    ports:
      - "5004:5004"
    expose:
      - "5004"
    environment:
      - NODE_ENV=development
      - PORT=5004
    depends_on:
      - localstack
    volumes:
      - "./services/documents:/app:cached"
      - "/app/node_modules"
    command: "supervisor -w ./ ./app.js"
    networks:
      - local-network
